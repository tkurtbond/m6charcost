#! /usr/bin/env python

import collections
import json
import re
import sys

debug = False

class InvalidStat (Exception):
    def __init__ (self, stat, msg):
        self.stat = stat
        self.msg = msg

pips_per_die = 4
die_rx = re.compile (r"^([0-9]+)[Dd](\+([1-3]))?$")

def dice_to_cost (stat):
    m = die_rx.match (stat)
    if m == None:
        raise InvalidStat (stat, 'invalid stat')
    dice = int (m.group (1))
    pips = int (m.group (3)) if m.group (3) else 0
    return (dice * 4) + pips

def cost_to_dice (cost):
    dice = cost / pips_per_die
    pips = cost % pips_per_die
    return '%dd+%d' % (dice, pips)
        

f = open (sys.argv[1], 'r')
s = f.read ()

characters = json.loads (s, object_pairs_hook=collections.OrderedDict)
if debug: print characters


# TODO: Figure out how to print out formatted characters.
#
# TODO: Use OrderedDict with json.JSONDecoder to get them in order,
#       then step through them in order and print everything.
num_characters = 0
for character in characters:
    num_characters += 1
    if num_characters > 1: print
    if 'name' in character:
        print 'name: %s' % character['name']
    if 'player' in character:
        print 'player: %s' % character['player']
    if 'statistics' in character:
        statistics = character['statistics']
    else:
        statistics = [ "Might", "Agility", "Wit", "Charm" ]
    # TODO: Check what form skills are listed, relative or absolute.
    # TODO: Check where skills listed, with stats or under 'skills'
    # 
    # This works for absolute skills listed with stats.
    total_stat_cost = 0
    total_skill_cost = 0
    for statname in statistics:
        stat_and_skills = character[statname]
        if debug: print stat_and_skills
        if len (stat_and_skills) < 1:
            raise Exception ('Missing stat: %d' % statname)
        stat = stat_and_skills[:1][0]
        stat_cost = dice_to_cost (stat)
        total_stat_cost += stat_cost
        print '%s: %s (%d)' % (statname, stat, stat_cost)
        skills = stat_and_skills[1:]
        skills = sorted (skills, key=lambda skill: skill[0])
        if debug: print 'skills: %s' % skills
        for [name, dice] in skills:
             skill_cost = dice_to_cost (dice)
             relative_cost = skill_cost - stat_cost
             relative_dice = cost_to_dice (relative_cost)
             total_skill_cost += relative_cost
             print '    %s: %s rel %s (%d rel %d)' % (name,
                                                      dice, relative_dice,
                                                      skill_cost, relative_cost)
    total_stat_dice = cost_to_dice (total_stat_cost)
    total_skill_dice = cost_to_dice (total_skill_cost)
    total_skill_and_perk_cost = total_skill_cost
    if 'Perks' in character:
        print 'Perks: ',
        perk_count = 0
        for [perk, perk_cost] in character['Perks']:
            perk_count = perk_count + 1
            if perk_count > 1: print ', '
            print '%s (%d)' % (perk, perk_cost)
            total_skill_and_perk_cost += perk_cost * pips_per_die
    print '\ntotal stat: %s (%d)\ntotal skill: %s (%d)' % (
        total_stat_dice, total_stat_cost, total_skill_dice, total_skill_cost
        )
    total_skill_and_perk_dice = cost_to_dice (total_skill_and_perk_cost)
    print 'total skill and perk: %s (%d)' % (total_skill_and_perk_dice,
                                             total_skill_and_perk_cost)
